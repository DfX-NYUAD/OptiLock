#key=10010101111100000000000100101001
INPUT(keyinput0)
INPUT(keyinput1)
INPUT(keyinput2)
INPUT(keyinput3)
INPUT(keyinput4)
INPUT(keyinput5)
INPUT(keyinput6)
INPUT(keyinput7)
INPUT(keyinput8)
INPUT(keyinput9)
INPUT(keyinput10)
INPUT(keyinput11)
INPUT(keyinput12)
INPUT(keyinput13)
INPUT(keyinput14)
INPUT(keyinput15)
INPUT(keyinput16)
INPUT(keyinput17)
INPUT(keyinput18)
INPUT(keyinput19)
INPUT(keyinput20)
INPUT(keyinput21)
INPUT(keyinput22)
INPUT(keyinput23)
INPUT(keyinput24)
INPUT(keyinput25)
INPUT(keyinput26)
INPUT(keyinput27)
INPUT(keyinput28)
INPUT(keyinput29)
INPUT(keyinput30)
INPUT(keyinput31)
INPUT(instr_i[0])
INPUT(instr_i[1])
INPUT(instr_i[2])
INPUT(instr_i[3])
INPUT(instr_i[4])
INPUT(instr_i[5])
INPUT(instr_i[6])
INPUT(instr_i[7])
INPUT(instr_i[8])
INPUT(instr_i[9])
INPUT(instr_i[10])
INPUT(instr_i[11])
INPUT(instr_i[12])
INPUT(instr_i[13])
INPUT(instr_i[14])
INPUT(instr_i[15])
INPUT(instr_i[16])
INPUT(instr_i[17])
INPUT(instr_i[18])
INPUT(instr_i[19])
INPUT(instr_i[20])
INPUT(instr_i[21])
INPUT(instr_i[22])
INPUT(instr_i[23])
INPUT(instr_i[24])
INPUT(instr_i[25])
INPUT(instr_i[26])
INPUT(instr_i[27])
INPUT(instr_i[28])
INPUT(instr_i[29])
INPUT(instr_i[30])
INPUT(instr_i[31])
INPUT(vcc)
OUTPUT(rvi_imm_o[0])
OUTPUT(rvi_imm_o[1])
OUTPUT(rvi_imm_o[2])
OUTPUT(rvi_imm_o[3])
OUTPUT(rvi_imm_o[4])
OUTPUT(rvi_imm_o[5])
OUTPUT(rvi_imm_o[6])
OUTPUT(rvi_imm_o[7])
OUTPUT(rvi_imm_o[8])
OUTPUT(rvi_imm_o[9])
OUTPUT(rvi_imm_o[10])
OUTPUT(rvi_imm_o[11])
OUTPUT(rvi_imm_o[12])
OUTPUT(rvi_imm_o[13])
OUTPUT(rvi_imm_o[14])
OUTPUT(rvi_imm_o[15])
OUTPUT(rvi_imm_o[16])
OUTPUT(rvi_imm_o[17])
OUTPUT(rvi_imm_o[18])
OUTPUT(rvi_imm_o[19])
OUTPUT(rvi_imm_o[20])
OUTPUT(rvi_imm_o[21])
OUTPUT(rvi_imm_o[22])
OUTPUT(rvi_imm_o[23])
OUTPUT(rvi_imm_o[24])
OUTPUT(rvi_imm_o[25])
OUTPUT(rvi_imm_o[26])
OUTPUT(rvi_imm_o[27])
OUTPUT(rvi_imm_o[28])
OUTPUT(rvi_imm_o[29])
OUTPUT(rvi_imm_o[30])
OUTPUT(rvi_imm_o[31])
OUTPUT(rvi_imm_o[32])
OUTPUT(rvi_imm_o[33])
OUTPUT(rvi_imm_o[34])
OUTPUT(rvi_imm_o[35])
OUTPUT(rvi_imm_o[36])
OUTPUT(rvi_imm_o[37])
OUTPUT(rvi_imm_o[38])
OUTPUT(rvi_imm_o[39])
OUTPUT(rvi_imm_o[40])
OUTPUT(rvi_imm_o[41])
OUTPUT(rvi_imm_o[42])
OUTPUT(rvi_imm_o[43])
OUTPUT(rvi_imm_o[44])
OUTPUT(rvi_imm_o[45])
OUTPUT(rvi_imm_o[46])
OUTPUT(rvi_imm_o[47])
OUTPUT(rvi_imm_o[48])
OUTPUT(rvi_imm_o[49])
OUTPUT(rvi_imm_o[50])
OUTPUT(rvi_imm_o[51])
OUTPUT(rvi_imm_o[52])
OUTPUT(rvi_imm_o[53])
OUTPUT(rvi_imm_o[54])
OUTPUT(rvi_imm_o[55])
OUTPUT(rvi_imm_o[56])
OUTPUT(rvi_imm_o[57])
OUTPUT(rvi_imm_o[58])
OUTPUT(rvi_imm_o[59])
OUTPUT(rvi_imm_o[60])
OUTPUT(rvi_imm_o[61])
OUTPUT(rvi_imm_o[62])
OUTPUT(rvi_imm_o[63])
OUTPUT(rvc_imm_o[0])
OUTPUT(rvc_imm_o[1])
OUTPUT(rvc_imm_o[2])
OUTPUT(rvc_imm_o[3])
OUTPUT(rvc_imm_o[4])
OUTPUT(rvc_imm_o[5])
OUTPUT(rvc_imm_o[6])
OUTPUT(rvc_imm_o[7])
OUTPUT(rvc_imm_o[8])
OUTPUT(rvc_imm_o[9])
OUTPUT(rvc_imm_o[10])
OUTPUT(rvc_imm_o[11])
OUTPUT(rvc_imm_o[12])
OUTPUT(rvc_imm_o[13])
OUTPUT(rvc_imm_o[14])
OUTPUT(rvc_imm_o[15])
OUTPUT(rvc_imm_o[16])
OUTPUT(rvc_imm_o[17])
OUTPUT(rvc_imm_o[18])
OUTPUT(rvc_imm_o[19])
OUTPUT(rvc_imm_o[20])
OUTPUT(rvc_imm_o[21])
OUTPUT(rvc_imm_o[22])
OUTPUT(rvc_imm_o[23])
OUTPUT(rvc_imm_o[24])
OUTPUT(rvc_imm_o[25])
OUTPUT(rvc_imm_o[26])
OUTPUT(rvc_imm_o[27])
OUTPUT(rvc_imm_o[28])
OUTPUT(rvc_imm_o[29])
OUTPUT(rvc_imm_o[30])
OUTPUT(rvc_imm_o[31])
OUTPUT(rvc_imm_o[32])
OUTPUT(rvc_imm_o[33])
OUTPUT(rvc_imm_o[34])
OUTPUT(rvc_imm_o[35])
OUTPUT(rvc_imm_o[36])
OUTPUT(rvc_imm_o[37])
OUTPUT(rvc_imm_o[38])
OUTPUT(rvc_imm_o[39])
OUTPUT(rvc_imm_o[40])
OUTPUT(rvc_imm_o[41])
OUTPUT(rvc_imm_o[42])
OUTPUT(rvc_imm_o[43])
OUTPUT(rvc_imm_o[44])
OUTPUT(rvc_imm_o[45])
OUTPUT(rvc_imm_o[46])
OUTPUT(rvc_imm_o[47])
OUTPUT(rvc_imm_o[48])
OUTPUT(rvc_imm_o[49])
OUTPUT(rvc_imm_o[50])
OUTPUT(rvc_imm_o[51])
OUTPUT(rvc_imm_o[52])
OUTPUT(rvc_imm_o[53])
OUTPUT(rvc_imm_o[54])
OUTPUT(rvc_imm_o[55])
OUTPUT(rvc_imm_o[56])
OUTPUT(rvc_imm_o[57])
OUTPUT(rvc_imm_o[58])
OUTPUT(rvc_imm_o[59])
OUTPUT(rvc_imm_o[60])
OUTPUT(rvc_imm_o[61])
OUTPUT(rvc_imm_o[62])
OUTPUT(rvc_imm_o[63])
OUTPUT(is_rvc_o)
OUTPUT(rvi_return_o)
OUTPUT(rvi_call_o)
OUTPUT(rvi_branch_o)
OUTPUT(rvi_jalr_o)
OUTPUT(rvi_jump_o)
OUTPUT(rvc_branch_o)
OUTPUT(rvc_jump_o)
OUTPUT(rvc_jr_o)
OUTPUT(rvc_return_o)
OUTPUT(rvc_jalr_o)
OUTPUT(rvc_call_o)
rvc_imm_o[0] = BUF(rvi_imm_o[0])
rvi_imm_o[20] = BUF(rvi_imm_o[63])
rvi_imm_o[21] = BUF(rvi_imm_o[21]_from_mux)
rvi_imm_o[21]_from_mux = MUX(keyinput14, rvi_imm_o[63], i65)
rvi_imm_o[22] = BUF(rvi_imm_o[63])
rvi_imm_o[23] = BUF(rvi_imm_o[63])
rvi_imm_o[24] = BUF(rvi_imm_o[63])
rvi_imm_o[25] = BUF(rvi_imm_o[63])
rvi_imm_o[26] = BUF(rvi_imm_o[63])
rvi_imm_o[27] = BUF(rvi_imm_o[63])
rvi_imm_o[28] = BUF(rvi_imm_o[28]_from_mux)
rvi_imm_o[28]_from_mux = MUX(keyinput6, rvi_imm_o[63], rvc_imm_o[63])
rvi_imm_o[29] = BUF(rvi_imm_o[29]_from_mux)
rvi_imm_o[29]_from_mux = MUX(keyinput16, rvi_imm_o[63], n6)
rvi_imm_o[30] = BUF(rvi_imm_o[63])
rvi_imm_o[31] = BUF(rvi_imm_o[63])
rvi_imm_o[32] = BUF(rvi_imm_o[32]_from_mux)
rvi_imm_o[32]_from_mux = MUX(keyinput10, n12, rvi_imm_o[63])
rvi_imm_o[33] = BUF(rvi_imm_o[33]_from_mux)
rvi_imm_o[33]_from_mux = MUX(keyinput21, rvi_imm_o[63], n6)
rvi_imm_o[34] = BUF(rvi_imm_o[34]_from_mux)
rvi_imm_o[34]_from_mux = MUX(keyinput8, rvc_imm_o[63], rvi_imm_o[63])
rvi_imm_o[35] = BUF(rvi_imm_o[35]_from_mux)
rvi_imm_o[35]_from_mux = MUX(keyinput19, rvi_imm_o[63], i74)
rvi_imm_o[36] = BUF(rvi_imm_o[63])
rvi_imm_o[37] = BUF(rvi_imm_o[63])
rvi_imm_o[38] = BUF(rvi_imm_o[63])
rvi_imm_o[39] = BUF(rvi_imm_o[63])
rvi_imm_o[40] = BUF(rvi_imm_o[40]_from_mux)
rvi_imm_o[40]_from_mux = MUX(keyinput13, rvi_imm_o[63], i58)
rvi_imm_o[41] = BUF(rvi_imm_o[63])
rvi_imm_o[42] = BUF(rvi_imm_o[42]_from_mux)
rvi_imm_o[42]_from_mux = MUX(keyinput7, n2, rvi_imm_o[63])
rvi_imm_o[43] = BUF(rvi_imm_o[63])
rvi_imm_o[44] = BUF(rvi_imm_o[63])
rvi_imm_o[45] = BUF(rvi_imm_o[45]_from_mux)
rvi_imm_o[45]_from_mux = MUX(keyinput11, rvc_imm_o[63], rvi_imm_o[63])
rvi_imm_o[46] = BUF(rvi_imm_o[63])
rvi_imm_o[47] = BUF(rvi_imm_o[63])
rvi_imm_o[48] = BUF(rvi_imm_o[63])
rvi_imm_o[49] = BUF(rvi_imm_o[63])
rvi_imm_o[50] = BUF(rvi_imm_o[63])
rvi_imm_o[51] = BUF(rvi_imm_o[63])
rvi_imm_o[52] = BUF(rvi_imm_o[63])
rvi_imm_o[53] = BUF(rvi_imm_o[53]_from_mux)
rvi_imm_o[53]_from_mux = MUX(keyinput31, i45, rvi_imm_o[63])
rvi_imm_o[54] = BUF(rvi_imm_o[63])
rvi_imm_o[55] = BUF(rvi_imm_o[63])
rvi_imm_o[56] = BUF(rvi_imm_o[63])
rvi_imm_o[57] = BUF(rvi_imm_o[63])
rvi_imm_o[58] = BUF(rvi_imm_o[63])
rvi_imm_o[59] = BUF(rvi_imm_o[59]_from_mux)
rvi_imm_o[59]_from_mux = MUX(keyinput29, rvi_imm_o[63], rvi_jalr_o)
rvi_imm_o[60] = BUF(rvi_imm_o[63])
rvi_imm_o[61] = BUF(rvi_imm_o[63])
rvi_imm_o[62] = BUF(rvi_imm_o[62]_from_mux)
rvi_imm_o[62]_from_mux = MUX(keyinput25, rvi_imm_o[63], i42)
rvi_imm_o[10] = BUF(instr_i[30])
rvi_imm_o[9] = BUF(instr_i[29])
rvi_imm_o[8] = BUF(instr_i[28])
rvi_imm_o[7] = BUF(instr_i[27])
rvi_imm_o[6] = BUF(instr_i[26])
rvi_imm_o[5] = BUF(instr_i[25])
rvc_imm_o[7] = BUF(instr_i[6])
rvc_imm_o[5] = BUF(instr_i[2])
rvc_imm_o[4] = BUF(instr_i[11])
rvc_imm_o[2] = BUF(instr_i[4])
rvc_imm_o[1] = BUF(instr_i[3])
rvc_call_o = BUF(rvc_jalr_o)
rvc_imm_o[11] = BUF(rvc_imm_o[63])
rvc_imm_o[12] = BUF(rvc_imm_o[63])
rvc_imm_o[13] = BUF(rvc_imm_o[63])
rvc_imm_o[14] = BUF(rvc_imm_o[14]_from_mux)
rvc_imm_o[14]_from_mux = MUX(keyinput9, i68, rvc_imm_o[63])
rvc_imm_o[15] = BUF(rvc_imm_o[63])
rvc_imm_o[16] = BUF(rvc_imm_o[63])
rvc_imm_o[17] = BUF(rvc_imm_o[17]_from_mux)
rvc_imm_o[17]_from_mux = MUX(keyinput11, rvi_imm_o[63], rvc_imm_o[63])
rvc_imm_o[18] = BUF(rvc_imm_o[63])
rvc_imm_o[19] = BUF(rvc_imm_o[63])
rvc_imm_o[20] = BUF(rvc_imm_o[63])
rvc_imm_o[21] = BUF(rvc_imm_o[21]_from_mux)
rvc_imm_o[21]_from_mux = MUX(keyinput0, is_rvc_o, rvc_imm_o[63])
rvc_imm_o[22] = BUF(rvc_imm_o[63])
rvc_imm_o[23] = BUF(rvc_imm_o[63])
rvc_imm_o[24] = BUF(rvc_imm_o[63])
rvc_imm_o[25] = BUF(rvc_imm_o[63])
rvc_imm_o[26] = BUF(rvc_imm_o[63])
rvc_imm_o[27] = BUF(rvc_imm_o[63])
rvc_imm_o[28] = BUF(rvc_imm_o[28]_from_mux)
rvc_imm_o[28]_from_mux = MUX(keyinput6, rvc_imm_o[63], rvi_imm_o[63])
rvc_imm_o[29] = BUF(rvc_imm_o[29]_from_mux)
rvc_imm_o[29]_from_mux = MUX(keyinput15, rvc_imm_o[63], n15)
rvc_imm_o[30] = BUF(rvc_imm_o[63])
rvc_imm_o[31] = BUF(rvc_imm_o[63])
rvc_imm_o[32] = BUF(rvc_imm_o[63])
rvc_imm_o[33] = BUF(rvc_imm_o[33]_from_mux)
rvc_imm_o[33]_from_mux = MUX(keyinput22, rvc_imm_o[63], i110)
rvc_imm_o[34] = BUF(rvc_imm_o[63])
rvc_imm_o[35] = BUF(rvc_imm_o[63])
rvc_imm_o[36] = BUF(rvc_imm_o[63])
rvc_imm_o[37] = BUF(rvc_imm_o[63])
rvc_imm_o[38] = BUF(rvc_imm_o[38]_from_mux)
rvc_imm_o[38]_from_mux = MUX(keyinput4, rvc_imm_o[63], n13)
rvc_imm_o[39] = BUF(rvc_imm_o[63])
rvc_imm_o[40] = BUF(rvc_imm_o[63])
rvc_imm_o[41] = BUF(rvc_imm_o[63])
rvc_imm_o[42] = BUF(rvc_imm_o[42]_from_mux)
rvc_imm_o[42]_from_mux = MUX(keyinput1, rvc_imm_o[63], n15)
rvc_imm_o[43] = BUF(rvc_imm_o[63])
rvc_imm_o[44] = BUF(rvc_imm_o[63])
rvc_imm_o[45] = BUF(rvc_imm_o[45]_from_mux)
rvc_imm_o[45]_from_mux = MUX(keyinput26, n25, rvc_imm_o[63])
rvc_imm_o[46] = BUF(rvc_imm_o[63])
rvc_imm_o[47] = BUF(rvc_imm_o[47]_from_mux)
rvc_imm_o[47]_from_mux = MUX(keyinput18, rvc_imm_o[63], i96)
rvc_imm_o[48] = BUF(rvc_imm_o[63])
rvc_imm_o[49] = BUF(rvc_imm_o[63])
rvc_imm_o[50] = BUF(rvc_imm_o[63])
rvc_imm_o[51] = BUF(rvc_imm_o[63])
rvc_imm_o[52] = BUF(rvc_imm_o[63])
rvc_imm_o[53] = BUF(rvc_imm_o[53]_from_mux)
rvc_imm_o[53]_from_mux = MUX(keyinput8, rvi_imm_o[63], rvc_imm_o[63])
rvc_imm_o[54] = BUF(rvc_imm_o[54]_from_mux)
rvc_imm_o[54]_from_mux = MUX(keyinput27, rvc_imm_o[63], n10)
rvc_imm_o[55] = BUF(rvc_imm_o[63])
rvc_imm_o[56] = BUF(rvc_imm_o[56]_from_mux)
rvc_imm_o[56]_from_mux = MUX(keyinput24, rvc_imm_o[63], i2)
rvc_imm_o[57] = BUF(rvc_imm_o[63])
rvc_imm_o[58] = BUF(rvc_imm_o[63])
rvc_imm_o[59] = BUF(rvc_imm_o[63])
rvc_imm_o[60] = BUF(rvc_imm_o[60]_from_mux)
rvc_imm_o[60]_from_mux = MUX(keyinput30, rvc_imm_o[63], i64)
rvc_imm_o[61] = BUF(rvc_imm_o[63])
rvc_imm_o[62] = BUF(rvc_imm_o[62]_from_mux)
rvc_imm_o[62]_from_mux = MUX(keyinput23, n13, rvc_imm_o[63])
rvi_return_o = AND(i1, rvi_return_o_from_mux)
rvi_return_o_from_mux = MUX(keyinput7, rvi_imm_o[63], n2)
i1 = AND(i1_from_mux, instr_i[15])
i1_from_mux = MUX(keyinput24, i2, rvc_imm_o[63])
i2 = AND(rvi_jalr_o, n1)
n2 = AND(i4, i7)
i4 = AND(i5, i6)
i5 = NOT(instr_i[19])
i6 = NOT(instr_i[7])
i7 = NOT(instr_i[18])
n1 = NOT(instr_i[16])
rvi_imm_o[4] = OR(i10, rvi_imm_o[4]_from_mux)
rvi_imm_o[4]_from_mux = MUX(keyinput3, i50, i11)
i10 = AND(n3, instr_i[11])
i11 = AND(instr_i[3], instr_i[24])
rvi_imm_o[3] = OR(i13, i16)
i13 = AND(i14, i15)
i14 = NOT(instr_i[3])
i15 = NOT(n4)
i16 = AND(instr_i[23], instr_i[3])
rvi_imm_o[2] = OR(i18, i19)
i18 = AND(n3, instr_i[9])
i19 = AND(instr_i[22], instr_i[3])
rvi_imm_o[1] = OR(i21, i24)
i21 = AND(i21_from_mux, i23)
i21_from_mux = MUX(keyinput12, i22, n3)
i22 = NOT(instr_i[3])
i23 = NOT(n5)
i24 = AND(instr_i[21], instr_i[3])
rvi_imm_o[19] = OR(i26, n6)
i26 = AND(instr_i[3], instr_i[19])
rvi_imm_o[18] = OR(i28, n6)
i28 = AND(instr_i[3], instr_i[18])
rvi_imm_o[17] = OR(i30, n6)
i30 = AND(instr_i[17], instr_i[3])
rvi_imm_o[16] = OR(i32, rvi_imm_o[16]_from_mux)
rvi_imm_o[16]_from_mux = MUX(keyinput28, i83, n6)
i32 = AND(instr_i[3], instr_i[16])
rvi_imm_o[15] = OR(rvi_imm_o[15]_from_mux, n6)
rvi_imm_o[15]_from_mux = MUX(keyinput2, i34, n3)
i34 = AND(instr_i[15], instr_i[3])
rvi_imm_o[14] = OR(i36, n6)
i36 = AND(instr_i[3], instr_i[14])
rvi_imm_o[13] = OR(i38, rvi_imm_o[13]_from_mux)
rvi_imm_o[13]_from_mux = MUX(keyinput21, n6, rvi_imm_o[63])
i38 = AND(instr_i[3], instr_i[13])
rvi_imm_o[12] = OR(i40, rvi_imm_o[12]_from_mux)
rvi_imm_o[12]_from_mux = MUX(keyinput16, n6, rvi_imm_o[63])
i40 = AND(instr_i[3], rvc_imm_o[63])
n6 = AND(rvi_imm_o[63], n6_from_mux)
n6_from_mux = MUX(keyinput25, i42, rvi_imm_o[63])
i42 = NOT(instr_i[3])
rvi_imm_o[11] = OR(i44, rvi_imm_o[11]_from_mux)
rvi_imm_o[11]_from_mux = MUX(keyinput31, rvi_imm_o[63], i45)
i44 = AND(i44_from_mux, instr_i[7])
i44_from_mux = MUX(keyinput2, n3, i34)
i45 = AND(instr_i[20], instr_i[3])
rvi_call_o = AND(i47, instr_i[7])
i47 = OR(i47_from_mux, rvi_jump_o)
i47_from_mux = MUX(keyinput29, rvi_jalr_o, rvi_imm_o[63])
rvc_return_o = AND(i49, instr_i[7])
i49 = AND(i49_from_mux, rvc_jr_o)
i49_from_mux = MUX(keyinput3, i11, i50)
i50 = AND(i50_from_mux, n4)
i50_from_mux = MUX(keyinput5, i104, i51)
i51 = AND(n5, n7)
n4 = NOT(instr_i[10])
n7 = NOT(instr_i[11])
n5 = NOT(instr_i[8])
rvc_jump_o = AND(rvc_jump_o_from_mux, n8)
rvc_jump_o_from_mux = MUX(keyinput20, i56, i108)
i56 = AND(instr_i[13], instr_i[0])
rvc_jr_o = AND(rvc_jr_o_from_mux, n10)
rvc_jr_o_from_mux = MUX(keyinput13, i58, rvi_imm_o[63])
i58 = AND(instr_i[1], i58_from_mux)
i58_from_mux = MUX(keyinput26, rvc_imm_o[63], n25)
rvc_jalr_o = AND(rvc_jalr_o_from_mux, rvc_imm_o[63])
rvc_jalr_o_from_mux = MUX(keyinput27, n10, rvc_imm_o[63])
n10 = AND(i61, i66)
i61 = AND(i62, i61_from_mux)
i61_from_mux = MUX(keyinput14, i65, rvi_imm_o[63])
i62 = AND(i63, i62_from_mux)
i62_from_mux = MUX(keyinput30, i64, rvc_imm_o[63])
i63 = NOT(instr_i[13])
i64 = NOT(instr_i[5])
i65 = NOT(n11)
i66 = NOT(i66_from_mux)
i66_from_mux = MUX(keyinput10, rvi_imm_o[63], n12)
n12 = OR(n12_from_mux, instr_i[6])
n12_from_mux = MUX(keyinput9, rvc_imm_o[63], i68)
i68 = OR(i69, instr_i[2])
i69 = OR(instr_i[3], instr_i[4])
n11 = NOT(n11_from_mux)
n11_from_mux = MUX(keyinput17, n8, rvc_imm_o[63])
n8 = AND(i72, instr_i[15])
i72 = AND(is_rvc_o, n13)
rvc_imm_o[9] = OR(rvc_imm_o[9]_from_mux, n14)
rvc_imm_o[9]_from_mux = MUX(keyinput19, i74, rvi_imm_o[63])
i74 = AND(n13, instr_i[10])
rvc_imm_o[8] = OR(i76, n14)
i76 = AND(n13, instr_i[9])
rvc_imm_o[6] = OR(i78, i81)
i78 = AND(i79, i80)
i79 = NOT(i79_from_mux)
i79_from_mux = MUX(keyinput1, n15, rvc_imm_o[63])
i80 = NOT(i80_from_mux)
i80_from_mux = MUX(keyinput23, rvc_imm_o[63], n13)
i81 = AND(n13, instr_i[7])
rvc_imm_o[3] = OR(rvc_imm_o[3]_from_mux, i86)
rvc_imm_o[3]_from_mux = MUX(keyinput28, n6, i83)
i83 = AND(i84, i85)
i84 = NOT(instr_i[14])
i85 = NOT(i85_from_mux)
i85_from_mux = MUX(keyinput15, n15, rvc_imm_o[63])
i86 = AND(instr_i[10], instr_i[14])
rvc_imm_o[10] = OR(i88, n14)
i88 = AND(i88_from_mux, instr_i[8])
i88_from_mux = MUX(keyinput4, n13, rvc_imm_o[63])
n14 = AND(n14_from_mux, instr_i[14])
n14_from_mux = MUX(keyinput17, rvc_imm_o[63], n8)
n13 = NOT(instr_i[14])
rvc_branch_o = AND(i92, is_rvc_o)
i92 = AND(i93, instr_i[0])
i93 = AND(instr_i[14], instr_i[15])
rvi_jump_o = AND(i95, i98)
i95 = AND(i95_from_mux, i97)
i95_from_mux = MUX(keyinput18, i96, rvc_imm_o[63])
i96 = NOT(n16)
i97 = NOT(n17)
i98 = NOT(i98_from_mux)
i98_from_mux = MUX(keyinput12, n3, i22)
n3 = NOT(instr_i[3])
rvi_jalr_o = AND(i101, rvi_jalr_o_from_mux)
rvi_jalr_o_from_mux = MUX(keyinput5, i51, i104)
i101 = AND(i102, i103)
i102 = NOT(n17)
i103 = NOT(instr_i[3])
i104 = NOT(n16)
n16 = NOT(instr_i[2])
rvi_branch_o = AND(i107, rvi_branch_o_from_mux)
rvi_branch_o_from_mux = MUX(keyinput22, i110, rvc_imm_o[63])
i107 = AND(i107_from_mux, i109)
i107_from_mux = MUX(keyinput20, i108, i56)
i108 = NOT(instr_i[3])
i109 = NOT(instr_i[2])
i110 = NOT(n17)
n17 = OR(i112, instr_i[4])
i112 = OR(i113, i112_from_mux)
i112_from_mux = MUX(keyinput0, rvc_imm_o[63], is_rvc_o)
i113 = OR(n18, n15)
is_rvc_o = OR(i115, i116)
i115 = NOT(instr_i[0])
i116 = NOT(instr_i[1])
n15 = NOT(instr_i[5])
n18 = NOT(instr_i[6])
rvi_imm_o[0] = BUF(vcc)
rvc_imm_o[63] = NOT(n24)
n24 = NOT(instr_i[12])
n25 = NOT(rvc_imm_o[63])
rvi_imm_o[63] = NOT(n27)
n27 = NOT(instr_i[31])

